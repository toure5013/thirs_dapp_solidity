BISMILLAHI RAHMANI RAHIM

1 - Les box Truffle
Pour ecrire son Smart contrat il est conseil d'utiliser des boilerplate comme pet-shop :
On le telecharge en faisant  :
-truffle unbox pet-shop


2.Contract.sol
La logique du smart contrat en solidity
Dans le dossier contracts : 
On ecrits notre logique du smart contrat

2. Migration
Dans le dossier migration 
On duplique 1.initial_migration  et on change les données à ce que notre Smart contart que nous venons de créer soit celui qui sera importer
- truffle migrate : pour deployer son smart contrat
- truffle migrate --reset : pour mettre à jour son smart contrat au cas où on changeait



3. Unit tests
Pour les test unitaire truffle embarque par défaut mocha et chai (deux librairires javascript pour écrire des test unitaires)
Dans le dossier test nous creons notre fichier de test avec l'extension.js et nous ecrivons notre scénario de test à l'intérieur: 

-Les operateurs mocha sont : (https://www.chaijs.com/guide/styles/)
assert.typeOf(foo, 'string'); // without optional message
assert.typeOf(foo, 'string', 'foo is a string'); // with optional message
assert.equal(foo, 'bar', 'foo equal `bar`');
assert.lengthOf(foo, 3, 'foo`s value has a length of 3');
assert.lengthOf(beverages.tea, 3, 'beverages has 3 types of tea');

foo.should.be.a('string');
foo.should.equal('bar');
foo.should.have.lengthOf(3);
beverages.should.have.property('tea').with.lengthOf(3);

Ensuite nous lançons la commande :
- truffle test : cette commande effectue les test unitaires et nous retourne le résultat directement dans la console




4.Les commandes : 
- truffle unbox <truffle box name>
- truffle migrate : pour deployer son smart contrat
- truffle migrate --reset : pour mettre à jour son smart contrat au cas où on changeait
- truffle console : pour ouvrir la console interactive nous permettant d'interargir avec notre smart contrat
- truffle test : cette commande effectue les test unitaires et nous retourne le résultat directement dans la console
